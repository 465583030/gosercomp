// Copyright 2012, Google Inc. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package gosercomp

// DO NOT EDIT.
// FILE GENERATED BY BSONGEN.

import (
	"bytes"

	"github.com/micro/go-bson"
)

// MarshalBson bson-encodes ColorGroup.
func (colorGroup *ColorGroup) MarshalBson(buf *bson.ChunkedWriter, key string) {
	bson.EncodeOptionalPrefix(buf, bson.Object, key)
	lenWriter := bson.NewLenWriter(buf)

	bson.EncodeInt(buf, "Id", colorGroup.Id)
	bson.EncodeString(buf, "Name", colorGroup.Name)
	// []string
	{
		bson.EncodePrefix(buf, bson.Array, "Colors")
		lenWriter := bson.NewLenWriter(buf)
		for _i, _v1 := range colorGroup.Colors {
			bson.EncodeString(buf, bson.Itoa(_i), _v1)
		}
		lenWriter.Close()
	}

	lenWriter.Close()
}

// UnmarshalBson bson-decodes into ColorGroup.
func (colorGroup *ColorGroup) UnmarshalBson(buf *bytes.Buffer, kind byte) {
	switch kind {
	case bson.EOO, bson.Object:
		// valid
	case bson.Null:
		return
	default:
		panic(bson.NewBsonError("unexpected kind %v for ColorGroup", kind))
	}
	bson.Next(buf, 4)

	for kind := bson.NextByte(buf); kind != bson.EOO; kind = bson.NextByte(buf) {
		switch bson.ReadCString(buf) {
		case "Id":
			colorGroup.Id = bson.DecodeInt(buf, kind)
		case "Name":
			colorGroup.Name = bson.DecodeString(buf, kind)
		case "Colors":
			// []string
			if kind != bson.Null {
				if kind != bson.Array {
					panic(bson.NewBsonError("unexpected kind %v for colorGroup.Colors", kind))
				}
				bson.Next(buf, 4)
				colorGroup.Colors = make([]string, 0, 8)
				for kind := bson.NextByte(buf); kind != bson.EOO; kind = bson.NextByte(buf) {
					bson.SkipIndex(buf)
					var _v1 string
					_v1 = bson.DecodeString(buf, kind)
					colorGroup.Colors = append(colorGroup.Colors, _v1)
				}
			}
		default:
			bson.Skip(buf, kind)
		}
	}
}
